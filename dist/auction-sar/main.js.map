{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/auction.service.ts","./src/app/auction/auction.component.ts","./src/app/auction/auction.component.html","./src/app/auth.guard.ts","./src/app/insertitem.service.ts","./src/app/insertitem/insertitem.component.ts","./src/app/insertitem/insertitem.component.html","./src/app/material/material.module.ts","./src/app/register.service.ts","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/signin.service.ts","./src/app/signin/signin.component.ts","./src/app/signin/signin.component.html","./src/app/socket.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuctionComponent } from './auction/auction.component';\nimport { InsertitemComponent } from './insertitem/insertitem.component';\nimport { RegisterComponent } from './register/register.component';\nimport { SigninComponent } from './signin/signin.component';\nimport { AuthGuard } from './auth.guard';\n\n// Define the routes\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'signin',\n    pathMatch: 'full'\n  },\n  {\n    path: 'signin',\n    component: SigninComponent\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'insertitem',\n    component: InsertitemComponent, \n    canActivate: [AuthGuard]         //can only route here after sucessfull login\n  },\n  {\n    path: 'auction',\n    component: AuctionComponent,\n    canActivate: [AuthGuard]        //can only route here after sucessfull login\n  }\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  providers: [AuthGuard],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'auction21';\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule} from '@angular/common/http';\n//import Routing module\nimport { AppRoutingModule } from './app-routing.module';\n//import SocketIoModule \nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MaterialModule}  from './material/material.module'\n//import Google maps Module \nimport { GoogleMapsModule } from '@angular/google-maps'\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AuctionComponent } from './auction/auction.component';\nimport { InsertitemComponent } from './insertitem/insertitem.component';\nimport { RegisterComponent } from './register/register.component';\nimport { SigninComponent } from './signin/signin.component';\nimport { AuthGuard } from './auth.guard';\nimport {SocketService} from './socket.service';\nimport {SigninService} from './signin.service';\nimport {AuctionService} from './auction.service';\nimport {RegisterService} from './register.service';\nimport {InsertitemService} from './insertitem.service';\n\n                             //the socket cannot start at bootstrap since the jwt token is still not available\n//const config: SocketIoConfig = { url: 'https://localhost:3000', options: {autoConnect : false} };\nconst config: SocketIoConfig = { url: window.location.origin, options: {autoConnect : false} };\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AuctionComponent,\n    InsertitemComponent,\n    RegisterComponent,\n    SigninComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    SocketIoModule.forRoot(config),\n    GoogleMapsModule\n  ],\n  providers: [\n     SigninService,\n     SocketService,\n     AuctionService,\n     RegisterService,\n     InsertitemService,\n     AuthGuard\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {throwError,  Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { SigninService } from './signin.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuctionService {\n\n\n  constructor(private http: HttpClient, private signinService: SigninService) {\n\n  }\n\n  getItems() {\n        // add authorization header with jwt token\n        let headers = new HttpHeaders({ 'Authorization': 'Bearer ' + this.signinService.token.token }); // insert tokern in the requests\n        let options = { headers: headers };\n\n        // get users from api\n        return this.http.get<any[]>('/api/items', options)\n              .pipe(\n                catchError(this.handleError) // handle error function will return an empty Item[] anf log the error\n              );\n    }\n\n   getUsers() {\n        // add authorization header with jwt token\n        let headers = new HttpHeaders({ 'Authorization': 'Bearer ' + this.signinService.token.token }); // insert tokern in the requests\n        const options = { headers: headers };\n\n        // get users from api\n        return this.http.get<any[]>('/api/users', options)\n              .pipe(\n                catchError(this.handleError) // handle error function will return an empty Item[] anf log the error\n              );\n   }\n\n  removeItem (item: any) {\n    console.log(\"auctiob service removeItem -> Removing an item.\");\n    let headers = new HttpHeaders({ 'Authorization': 'Bearer ' + this.signinService.token.token }); // insert tokern in the requests\n    //let options = { headers: headers };\n\n    return this.http.delete<any>( \"/api/items/removeitem\", {\n      body: item,\n      headers: headers,\n    })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n     /**\n   * Handle Http operation that failed.\n   */\n   private handleError (error: HttpErrorResponse) {\n    let errMsg:string;\n    if (error.error instanceof ErrorEvent) {\n    // A client-side or network error occurred. Handle it accordingly.\n      errMsg = error.error.message ? error.error.message : error.toString()\n      console.error(errMsg);\n    } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong,\n      errMsg = error.status + ' - ' + error.statusText;\n      console.error(errMsg);\n    }\n    return throwError(()=> new Error (errMsg));\n    };\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { SocketService } from \"../socket.service\";\nimport { AuctionService } from \"../auction.service\";\nimport { SigninService } from \"../signin.service\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpResponse,\n  HttpErrorResponse,\n} from \"@angular/common/http\";\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { throwError, Observable } from \"rxjs\";\nimport { Item } from \"../item\";\nimport { Chat } from \"../chat\";\nimport { User } from \"../user\";\nimport { Marker } from \"../marker\";\nimport { SoldItem } from \"../soldItem\";\n\n@Component({\n  selector: \"app-auction\",\n  templateUrl: \"./auction.component.html\",\n  styleUrls: [\"./auction.component.css\"],\n})\nexport class AuctionComponent implements OnInit {\n  items: Item[]; //array of items to store the items.\n  users: User[];\n  soldItem: object;\n  messageSender: string;\n  displayedColumns: string[]; //Array of Strings with the table column names\n  message: string; // message string\n  showBid: boolean; //boolean to control if the show bid form is placed in the DOM\n  showMessage: boolean; //boolean to control if the send message form is placed in the DOM\n  selectedItem!: Item; //Selected Item\n  bidForm!: FormGroup; //FormGroup for the biding\n  userName!: string;\n  errorMessage: string; //string to store error messages received in the interaction with the api\n  mapOptions: google.maps.MapOptions;\n  soldHistory: string[];\n  messages: object[];\n  markers: Marker[]; //array to store the markers for the looged users posistions.\n  centerLat: number;\n  centerLong: number;\n  showRemove: boolean;\n  showSubmitBit: boolean;\n  deleteItemUrl: string;\n  formControl: boolean;\n  counter: number;\n  leftTime: number;\n  showSenderMessage: boolean;\n  status: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private socketservice: SocketService,\n    private auctionservice: AuctionService,\n    private signinservice: SigninService,\n    private http: HttpClient\n  ) {\n    this.deleteItemUrl = \"/api/items/removeitem\";\n    this.items = [];\n    this.messageSender = \"\";\n    this.status = \"\";\n    this.users = [];\n    this.soldItem = {};\n    this.formControl = false;\n    this.soldHistory = [\n      \"No items were sold.\",\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n      \"\",\n    ];\n    this.messages = [];\n    this.counter = 0;\n    this.message = \"\";\n    this.showBid = false;\n    this.showMessage = false;\n    this.userName = this.signinservice.token.username;\n    this.errorMessage = \"\";\n    this.showSenderMessage = false;\n    this.displayedColumns = [\n      \"description\",\n      \"currentbid\",\n      \"buynow\",\n      \"remainingtime\",\n      \"wininguser\",\n      \"owner\",\n    ];\n    this.centerLat = 0;\n    this.centerLong = 0;\n    this.markers = [];\n    this.showRemove = false;\n    this.showSubmitBit = false;\n    this.leftTime = 0;\n    this.mapOptions = {\n      center: { lat: this.centerLat, lng: this.centerLong },\n      zoom: 10,\n    };\n  }\n\n  ngOnInit(): void {\n    this.message =\n      \"Hello \" + this.userName + \"! Welcome to the SAR auction site.\";\n\n    //create bid form\n    this.bidForm = this.formBuilder.group({\n      bid: [\n        \"\",\n        Validators.compose([\n          Validators.required,\n          Validators.pattern(\"^[0-9]*$\"),\n        ]),\n      ],\n      message: [\"\"],\n    });\n\n    // Get initial item data from the server api using http call in the auctionservice\n    this.auctionservice.getItems().subscribe({\n      next: (result) => {\n        let receiveddata = result as Item[]; // cast the received data as an array of items (must be sent like that from server)\n        this.items = receiveddata;\n\n        console.log(\n          \"getItems Auction Component -> received the following items: \",\n          receiveddata\n        );\n      },\n      error: (error) => (this.errorMessage = <any>error),\n    });\n\n    //  Possibily getUsers to show in googleMaps using get users API call for server? Implies changing auction.service.ts to define a new HTTP call\n\n    //subscribe to the incoming websocket events\n\n    //example how to subscribe to websocket events in this case the update:items event that is sent every second\n    this.socketservice.getEvent(\"update:items\").subscribe((data) => {\n      let receiveddata = data as Item[];\n      if (this.items) {\n        this.items = receiveddata;\n      }\n    });\n\n    this.socketservice.getEvent(\"sold:item\").subscribe((data) => {\n      let receiveddata = data as SoldItem;\n\n      if (this.soldHistory) {\n        if (receiveddata.winner) {\n          this.soldHistory[this.counter] = receiveddata.description.toString();\n          this.counter++;\n        }\n      }\n    });\n\n    this.socketservice.getEvent(\"error:message\").subscribe((data) => {\n      let receiveddata = data as string;\n      this.message = receiveddata;\n    });\n\n    this.socketservice.getEvent(\"receive:message\").subscribe((data) => {\n      let receiveddata = data as Chat;\n      if (this.messages) {\n        this.messages.push(receiveddata);\n        this.showSenderMessage = true;\n      }\n    });\n\n    //subscribe to the an event sent by the server for each item that ends.\n    //subscribe to an event sent by the the server when a user sends a message\n    //subscribe to any other events that you create\n\n    //subscribe to the item sold event sent by the server for each item that ends.\n\n    //subscription to any other events must be performed here inside the ngOnInit function\n  }\n\n  /**\n   * Handle Http operation that failed.\n   */\n  private handleError(error: HttpErrorResponse) {\n    let errMsg: string;\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errMsg = error.error.message ? error.error.message : error.toString();\n      console.error(errMsg);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errMsg = error.status + \" - \" + error.statusText;\n      console.error(errMsg);\n    }\n    return throwError(() => new Error(errMsg));\n  }\n\n  logout() {\n    //call the logout function in the signInService to clear the token in the browser\n    this.signinservice.logout(); // must be done first so that the token is erased does not allow socket automatic reconnection\n    //perform any needed logout logic here\n    this.socketservice.disconnect();\n    //navigate back to the log in page\n    this.router.navigate([\"/signin\"]);\n  }\n\n  //function called when an item is selected in the view\n  onRowClicked(item: Item) {\n    console.log(\"Selected item = \", item);\n    this.selectedItem = item;\n    this.showBid = true; // makes the bid form appear\n\n    //For now all buttons are shown fix this!\n    //this.showRemove = true; // should only appear when the user is the owner of the selected item\n    this.showMessage = true; //should only appear when the user is NOT the owner of the selected item\n\n    //check if the user is the owner of the item\n    this.userName !== item.owner\n      ? (this.showRemove = false)\n      : (this.showRemove = true);\n    //show the submit bit button only if the user is not the owner of the item\n    this.userName === item.owner\n      ? (this.showSubmitBit = false)\n      : (this.showSubmitBit = true);\n  }\n\n  // function called when the submit bid button is pressed\n  submit() {\n    console.log(\"submitted bid = \", this.bidForm.value.bid);\n    //send an event using the websocket for this use the socketservice\n    // example :  this.socketservice.sendEvent('eventname',eventdata);\n    this.socketservice.sendEvent(\"send:bid\", {\n      newBid: this.bidForm.value.bid,\n      itemData: this.selectedItem,\n      userName: this.userName,\n    });\n  }\n  //function called when the user presses the Send message button\n  sendMessage() {\n    console.log(\"Sending message to = \", this.selectedItem.owner);\n    console.log(\"Message  = \", this.bidForm.value.message);\n    //send an event using the websocket for this use the socketservice\n    // example :  this.socketservice.sendEvent('eventname',eventdata);\n    //eventdata can be an object of the chat type.\n    this.socketservice.sendEvent(\"send:message\", {\n      message: this.bidForm.value.message,\n      sender: this.userName,\n      receiver: this.selectedItem.owner,\n    });\n  }\n\n  //function called when the cancel bid button is pressed.\n  cancelBid() {\n    this.bidForm.reset(); //clears bid value\n  }\n\n  //function called when the buy now button is pressed.\n  buyNow() {\n    console.log(\"buying now\", this.selectedItem.buynow);\n\n    this.bidForm.setValue({\n      /// sets the field value to the buy now value of the selected item\n      bid: this.selectedItem.buynow,\n      message: \"\",\n    });\n\n    this.message =\n      this.userName +\n      \" please press the Submit Bid button to procced with the Buy now order.\";\n  }\n\n  //function called when the remove item button is pressed.\n  removeItem() {\n    //call the HTTP call removeItem in the auctionservice and subscribe to the result\n    this.auctionservice.removeItem(this.selectedItem).subscribe({\n      next: (result) => {\n        if (result) {\n          //remove the item from the items array in UI\n          this.items = this.items.filter(\n            (item) => item._id !== this.selectedItem._id\n          );\n        }\n        console.log(\n          \"removeItem Auction Component -> received the following result: \",\n          result\n        );\n      },\n    });\n\n    //send an event using the websocket for this use the socketservice\n  }\n}\n","<mat-sidenav-container>\n  <mat-sidenav #sidenav role=\"navigation\"> </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <div fxHide.gt-xs>\n        <button mat-icon-button (click)=\"sidenav.toggle()\">\n          <mat-icon>menu</mat-icon>\n        </button>\n      </div>\n      <div>\n        <a routerLink=\"/\"> Auction SAR 22 </a>\n      </div>\n      <div fxFlex fxLayout fxLayoutAlign=\"flex-end\" fxHide.xs>\n        <ul fxLayout fxLayoutGap=\"10px\" class=\"navigation-items\">\n          <li>\n            <span>\n              Welcome:\n              {{ userName }}\n            </span>\n          </li>\n          <li>\n            <a routerLink=\"/insertitem\">\n              <mat-icon class=\"icon\">fiber_new</mat-icon>\n              <span class=\"label\">New Item</span>\n            </a>\n          </li>\n          <li>\n            <a>\n              <mat-icon class=\"icon\" (click)=\"logout()\">input</mat-icon>\n              <span class=\"label\" (click)=\"logout()\">LogOut</span>\n            </a>\n          </li>\n        </ul>\n      </div>\n    </mat-toolbar>\n    <main>\n      <mat-card fxLayout=\"column\" fxLayoutAlign=\"space-between stretch\">\n        <mat-table [dataSource]=\"items\">\n          <!-- Description Column -->\n          <ng-container matColumnDef=\"description\">\n            <mat-header-cell *matHeaderCellDef>Description</mat-header-cell>\n            <mat-cell *matCellDef=\"let item\"> {{ item.description }} </mat-cell>\n          </ng-container>\n\n          <!-- Current Bid Column -->\n          <ng-container matColumnDef=\"currentbid\">\n            <mat-header-cell *matHeaderCellDef>Current bid</mat-header-cell>\n            <mat-cell *matCellDef=\"let item\">{{ item.currentbid }}</mat-cell>\n          </ng-container>\n\n          <!-- buy bow Column -->\n          <ng-container matColumnDef=\"buynow\">\n            <mat-header-cell *matHeaderCellDef>Buy Now</mat-header-cell>\n            <mat-cell *matCellDef=\"let item\">{{ item.buynow }}</mat-cell>\n          </ng-container>\n\n          <!-- Remaining time Column -->\n          <ng-container matColumnDef=\"remainingtime\">\n            <mat-header-cell *matHeaderCellDef>Remaining Time</mat-header-cell>\n            <mat-cell *matCellDef=\"let item\">\n              {{ item.remainingtime }}\n            </mat-cell>\n          </ng-container>\n\n          <!-- Wining user Column -->\n          <ng-container matColumnDef=\"wininguser\">\n            <mat-header-cell *matHeaderCellDef>Wining User</mat-header-cell>\n            <mat-cell *matCellDef=\"let item\">{{ item.wininguser }}</mat-cell>\n          </ng-container>\n\n          <!-- Owner user Column -->\n          <ng-container matColumnDef=\"owner\">\n            <mat-header-cell *matHeaderCellDef>Owner</mat-header-cell>\n            <mat-cell *matCellDef=\"let item\">{{ item.owner }}</mat-cell>\n          </ng-container>\n\n          <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n          <mat-row\n            *matRowDef=\"let row; columns: displayedColumns\"\n            (click)=\"onRowClicked(row)\"\n            [ngClass]=\"{\n              blink: row.remainingtime <= 10,\n              red: row.remainingtime === 0\n            }\"\n          ></mat-row>\n        </mat-table>\n        <!-----End of table -->\n      </mat-card>\n      <mat-card fxLayoutAlign=\"center center\">\n        <form [formGroup]=\"bidForm\" (submit)=\"submit()\" *ngIf=\"showBid\">\n          <div\n            fxLayout=\"column\"\n            fxFlex\n            fxLayout.lt-sm=\"column\"\n            fxLayoutGap=\"5px\"\n          >\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>\n                Place Bid for {{ selectedItem.description }}\n              </mat-label>\n              <input matInput formControlName=\"bid\" required   />\n              <mat-error\n            \n                *ngIf=\"\n                  bidForm.controls.bid.touched && bidForm.controls.bid.invalid\n                \"\n              >\n                <span *ngIf=\"bidForm.controls.bid.errors?.required\"\n                  >This field is mandatory.</span\n                >\n                <span *ngIf=\"bidForm.controls.bid.errors?.pattern\"\n                  >This must be a positive number.</span\n                >\n              </mat-error>\n            </mat-form-field>\n            <mat-form-field\n              class=\"form-field\"\n              appearance=\"outline\"\n              *ngIf=\"showMessage\"\n            >\n              <mat-label> Send Message to {{ selectedItem.owner }} </mat-label>\n              <input matInput formControlName=\"message\" />\n            </mat-form-field>\n            <button\n              mat-raised-button\n              color=\"primary\"\n              [disabled]=\"!bidForm.valid\" \n              type=\"submit\"\n              *ngIf=\"showSubmitBit\"\n            >\n              <span *ngIf=\"selectedItem.sold && selectedItem.wininguser \">\n                Item Sold\n              </span>\n\n              <span *ngIf=\"!selectedItem.sold && !selectedItem.wininguser && selectedItem.remainingtime > 0\">\n                Submit Bid\n              </span>\n\n              <span *ngIf=\"!selectedItem.wininguser && selectedItem.remainingtime === 0 \">\n                no winner time expired\n              </span>\n\n            \n            </button>\n            <button\n              mat-raised-button\n              color=\"primary\"\n              type=\"button\"\n              (click)=\"sendMessage()\"\n              *ngIf=\"showMessage\"\n            >\n              Send Message\n            </button>\n            <button\n              mat-raised-button\n              color=\"primary\"\n              type=\"button\"\n              (click)=\"cancelBid()\"\n            >\n              Cancel\n            </button>\n            <button\n              mat-raised-button\n              color=\"primary\"\n              type=\"button\"\n              (click)=\"buyNow()\"\n              *ngIf=\"showSubmitBit\"\n            >\n              Buy Now\n            </button>\n            <button\n              mat-raised-button\n              color=\"primary\"\n              type=\"button\"\n              (click)=\"removeItem()\"\n              *ngIf=\"showRemove\"\n             \n            >\n              Remove\n            </button>\n          </div>\n        </form>\n        <mat-card>\n          <google-map [width]=\"350\" [height]=\"250\" [options]=\"mapOptions\">\n            <map-marker\n              *ngFor=\"let marker of markers\"\n              [position]=\"marker.position\"\n              [label]=\"marker.label\"\n            >\n            </map-marker>\n          </google-map>\n        </mat-card>\n\n        <mat-card fxLayoutAlign=\"center center\">\n          <div class=\"logClass\">\n            <ng-container *ngFor=\"let text_log of soldHistory\">\n              {{ text_log }}\n              <br />\n            </ng-container>\n          </div>\n        </mat-card>\n\n        <mat-card>\n          <div class=\"logClass\">\n            <p>Messages:</p>\n            <ng-container *ngFor=\"let text_log of messages\">\n              <p *ngIf=\"showSenderMessage\">\n                from: {{ text_log.sender }}=> {{ text_log.message }}\n              </p>\n\n              <br />\n            </ng-container>\n          </div>\n        </mat-card>\n      </mat-card>\n      <!-- Message Card -->\n      <mat-card fxLayoutAlign=\"center center\">\n        <p class=\"message\">\n          {{ message }}\n        </p>\n      </mat-card>\n      <!-- Error Card -->\n      <mat-card\n        class=\"error\"\n        fxLayoutAlign=\"center center\"\n        *ngIf=\"errorMessage\"\n      >\n        {{ errorMessage }}\n      </mat-card>\n    </main>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  \n  constructor(private router: Router) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n  if (localStorage.getItem('currentUser')) {\n            // logged in so return true Current User contains user information and the JWT token\n            console.log ('AuthGuard returned true, currentUser= ', localStorage.getItem('currentUser'));\n            return true;\n        }\n \n        // not logged in so redirect to login page\n        console.log ('AuthGuard returned false');\n        this.router.navigate(['/signin']);\n        return false;\n  }\n}","import { Injectable } from '@angular/core';\nimport {throwError,  Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { SigninService } from './signin.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InsertitemService {\n  private newitemUrl\n  constructor(private http: HttpClient, private signinservice: SigninService) { \n    this.newitemUrl = \"/api/items/newitem\";\n  }\n\n  // Http POST call to the api to submit the new user data returns a boolean observer to indicate success\n  submitNewItem (item: any) {\n\n    const currentUser = JSON.parse( localStorage.getItem('currentUser') || '{}');\n  \n    let headers = new HttpHeaders({ 'Authorization': 'Bearer ' + currentUser.token }); // insert tokern in the requests\n    let options = { headers: headers };\n            \n    return this.http.post<any>(this.newitemUrl, item, options)\n           .pipe(\n             catchError(this.handleError)\n           );\n  }\n\n\n    /**\n   * Handle Http operation that failed.\n   */\n   private handleError (error: HttpErrorResponse) {\n    let errMsg:string;\n    if (error.error instanceof ErrorEvent) {\n    // A client-side or network error occurred. Handle it accordingly.\n      errMsg = error.error.message ? error.error.message : error.toString()\n      console.error(errMsg);\n    } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong,\n      errMsg = error.status + ' - ' + error.statusText;\n      console.error(errMsg);\n    }\n    return throwError(()=> new Error (errMsg));\n    }; \n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { InsertitemService } from \"../insertitem.service\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\nimport { SigninService } from \"../signin.service\";\nimport { SocketService } from \"../socket.service\";\n\n@Component({\n  selector: \"app-insertitem\",\n  templateUrl: \"./insertitem.component.html\",\n  styleUrls: [\"./insertitem.component.css\"],\n})\nexport class InsertitemComponent implements OnInit {\n  errorMessage: string; // string to store error messages\n  itemForm!: FormGroup;\n  userName!: string;\n\n  constructor(\n    private insertitemservice: InsertitemService,\n    private socketservice: SocketService,\n    private router: Router,\n    private signinservice: SigninService\n  ) {\n    this.errorMessage = \"\";\n    this.userName = this.signinservice.token.username;\n  }\n\n  ngOnInit(): void {\n    this.itemForm = new FormGroup({\n      description: new FormControl(\"\", [Validators.required]),\n      currentbid: new FormControl(\"\", [\n        Validators.required,\n        Validators.pattern(\"^[0-9]*$\"),\n      ]),\n      buynow: new FormControl(\"\", [\n        Validators.required,\n        Validators.pattern(\"^[0-9]*$\"),\n      ]),\n      remainingtime: new FormControl(\"\", [\n        Validators.required,\n        Validators.pattern(\"^[0-9]*$\"),\n      ]),\n      owner: new FormControl(\"\", [Validators.required]),\n    });\n    this.itemForm.patchValue({ owner: this.userName });\n    //this.itemForm.setValue({owner: this.userName});\n    console.log(this.itemForm.value);\n  }\n\n  get f() {\n    return this.itemForm.controls;\n  }\n\n  submit() {\n    this.insertitemservice.submitNewItem(this.itemForm.value).subscribe({\n      next: (result) => {\n        console.log(\"item inserted succcessfully\", result);\n        //registration successfull navigate to login page\n        this.router.navigate([\"/auction\"]);\n        //send the new item to the socket\n        this.socketservice.sendEvent(\"add:item\", {});\n      }, //callback to cath errors thrown bby the Observable in the service\n      error: (error) => {\n        console.log(\"error\", error);\n        this.errorMessage = <any>error;\n      },\n    });\n  }\n\n  clearForm() {\n    //clears what is appering in the form\n    this.itemForm.reset();\n  }\n\n  logout() {}\n}\n","<mat-sidenav-container>\n  <mat-sidenav  #sidenav role=\"navigation\">\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n     <div fxHide.gt-xs>\n       <button mat-icon-button (click)=\"sidenav.toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n    </div>\n     <div>\n       <a routerLink=\"/\">\n          Auction SAR 22\n       </a>\n     </div>\n     <div fxFlex fxLayout fxLayoutAlign=\"flex-end\"  fxHide.xs>\n        <ul fxLayout fxLayoutGap=\"10px\" class=\"navigation-items\">\n            <li>\n                <a\n                  routerLink=\"/auction\">\n                    <mat-icon class=\"icon\">dashboard</mat-icon>\n                    <span class=\"label\">auction</span>\n                </a>\n              </li>\n            <li>\n                <a>\n                  <mat-icon class=\"icon\"(click)=\"logout()\">input</mat-icon>\n                  <span class=\"label\"(click)=\"logout()\">LogOut</span>   \n                 </a>\n            </li>\n        </ul>\n     </div>\n    </mat-toolbar>\n    <main>\n\t    <mat-card fxLayoutAlign=\"center center\">\n          <form [formGroup]=\"itemForm\" (submit)=\"submit()\">\n            <div fxLayout=\"column\" fxFlex fxLayout.lt-sm=\"column\" fxLayoutGap=\"0px\">\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Description\n                </mat-label>\n                <input matInput formControlName=\"description\" id=\"description\" type=\"text\" class=\"form-control\">\n                <mat-error *ngIf=\"f['description'].touched && f['description'].invalid\">\n                  <span *ngIf=\"f['description'].errors['required']\">This field is mandatory.</span>\n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Starting bid value\n                </mat-label>\n                <input matInput formControlName=\"currentbid\" id=\"currentbid\" type=\"number\" class=\"form-control\">\n                <mat-error *ngIf=\"f['currentbid'].touched && f['currentbid'].invalid\">\n                  <span *ngIf=\"f['currentbid'].errors['required']\">This field is mandatory.</span>\n                  <span *ngIf=\"f['currentbid'].errors['pattern']\">This must be a positive number.</span>\n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Buy now Value\n                </mat-label>\n                <input matInput formControlName=\"buynow\" id=\"buynow\" type=\"number\" class=\"form-control\">\n                <mat-error *ngIf=\"f['buynow'].touched && f['buynow'].invalid\">\n                   <span *ngIf=\"f['buynow'].errors['required']\">This field is mandatory.</span>\n                   <span *ngIf=\"f['buynow'].errors['pattern']\">This must be a positive number.</span>\n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Duration (in seconds)\n                </mat-label>\n                <input matInput formControlName=\"remainingtime\" id=\"remainingtime\" type=\"text\" class=\"form-control\">\n                <mat-error *ngIf=\"f['remainingtime'].touched && f['remainingtime'].invalid\">\n                  <span *ngIf=\"f['remainingtime'].errors['required']\">This field is mandatory.</span>\n                  <span *ngIf=\"f['remainingtime'].errors['pattern']\">This must be a positive number.</span>\n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Owner (username)\n                </mat-label>\n                <input matInput formControlName=\"owner\" id=\"owner\" type=\"text\" class=\"form-control\">\n              </mat-form-field>\n              <button mat-raised-button  color=\"primary\" [disabled]=\"!itemForm.valid\" type=\"submit\">Insert Item</button>\n              <button mat-raised-button color=\"primary\" type= \"button\" (click)=\"clearForm()\">Clear</button>\n            </div>\n          </form>\n      </mat-card>\n      <mat-card class=\"error\" fxLayoutAlign=\"center center\" *ngIf=\"errorMessage\" >\n        {{errorMessage}}\n      </mat-card>\n    </main>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n","import { NgModule } from '@angular/core';\nimport {MatSidenavModule} from '@angular//material/sidenav';\nimport {MatToolbarModule} from '@angular/material/toolbar'; \nimport {MatIconModule} from '@angular/material/icon';\nimport {MatListModule} from '@angular/material/list';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatTableModule} from \"@angular/material/table\";\t\n\n@NgModule({\n  imports: [\n    MatSidenavModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatListModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatTableModule,\n  ],\n\n  exports: [\n    MatSidenavModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatListModule,\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatTableModule,\n  ]\n})\nexport class MaterialModule { }\n","import { Injectable } from '@angular/core';\nimport {throwError,  Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RegisterService {\n  private registerUrl\n  \n  constructor(private http: HttpClient) { \n  \tthis.registerUrl = \"/api/auth/register\";\n  }\n\n  // Http POST call to the api to submit the new user data returns a boolean observer to indicate success\n submitNewUser (user: any) {\n              \n              return this.http.post<any>(this.registerUrl, user)\n                     .pipe(\n                        catchError(this.handleError)\n                      );\n }\n\n  /**\n   * Handle Http operation that failed.\n   */\n   private handleError (error: HttpErrorResponse) {\n    let errMsg:string;\n    if (error.error instanceof ErrorEvent) {\n    // A client-side or network error occurred. Handle it accordingly.\n      errMsg = error.error.message ? error.error.message : error.toString()\n      console.error(errMsg);\n    } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong,\n      errMsg = error.status + ' - ' + error.statusText;\n      console.error(errMsg);\n    }\n    return throwError(()=> new Error (errMsg));\n    }; \n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RegisterService } from '../register.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n   errorMessage : string; // string to store error messages\t\n   userForm!: FormGroup;\n\n   //pass the relevant services in to the component\n  constructor( \n  \tprivate registerservice: RegisterService, private router: Router\n  ) { \n      this.errorMessage = \"\";\n    }\n\n  ngOnInit(): void {\n  \t this.userForm = new FormGroup({\n      name: new FormControl ('', [Validators.required]),\n      username: new FormControl ('', [Validators.required]),\n      email: new FormControl ('', [Validators.required,Validators.pattern(/^(([^<>+()\\[\\]\\\\.,;:\\s@\"-#$%&=]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,3}))$/)]),\n      password: new FormControl ('', [Validators.required])\n  \t });\n  }\n  \n  get f(){\n\n    return this.userForm.controls;\n\n  }\n\n  submit(){\n  \t this.registerservice.submitNewUser(this.userForm.value)\n   \t   .subscribe({\n   \t   \t  next: user => {\n   \t   \t  \t \t//registration successfull navigate to login page\n   \t   \t  \t \tthis.router.navigate(['/signin']); \n   \t   \t  }, //callback to cath errors thrown bby the Observable in the service\n   \t   \t  error: error => {\n   \t   \t  \tthis.errorMessage = <any>error;\n   \t   \t  }\n        });\n  }\n\n  clearForm() {\n  \t//clears what is appering in the form\n  \tthis.userForm.reset(); \n\n  }\n\n}\n","<mat-sidenav-container>\n  <mat-sidenav  #sidenav role=\"navigation\">\n   <mat-nav-list>\n    <a mat-list-item\n        routerLink=\"/\">\n      <mat-icon class=\"icon\">input</mat-icon>\n        <span class=\"label\">Log In</span>\n    </a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n     <div fxHide.gt-xs>\n       <button mat-icon-button (click)=\"sidenav.toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n    </div>\n     <div>\n       <a routerLink=\"/\">\n          Auctions SAR 22\n       </a>\n     </div>\n     <div fxFlex fxLayout fxLayoutAlign=\"flex-end\"  fxHide.xs>\n        <ul fxLayout fxLayoutGap=\"20px\" class=\"navigation-items\">\n            <li>\n              <a\n                routerLink=\"/\">\n                  <mat-icon class=\"icon\">input</mat-icon>\n                  <span class=\"label\">Log In</span>\n              </a>\n            </li>\n        </ul>\n     </div>\n    </mat-toolbar>\n    <main>\n     <mat-card fxLayoutAlign=\"center center\">\n          <form [formGroup]=\"userForm\" (submit)=\"submit()\">\n            <div fxLayout=\"column\" fxFlex fxLayout.lt-sm=\"column\" fxLayoutGap=\"0px\">\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Name\n                </mat-label>\n                <input matInput formControlName=\"name\" id=\"name\" type=\"text\" class=\"form-control\">\n                <mat-error *ngIf=\"f['name'].touched && f['name'].invalid\">\n                  <span *ngIf=\"f.controls.name.errors?.required\">This field is mandatory.</span> \n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> E-mail\n                </mat-label>\n                <input matInput formControlName=\"email\" id=\"email\" type=\"text\" class=\"form-control\">\n                <mat-error *ngIf=\"f['email'].touched && f['username'].invalid\">\n                  <span *ngIf=\"f['email'].errors['required']\">This field is mandatory.</span>\n                  <span *ngIf=\"f['email'].errors['pattern']\">This field is invalid.</span> \n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> User Name\n                </mat-label>\n                <input matInput formControlName=\"username\" id=\"username\" type=\"text\" class=\"form-control\">\n                <mat-error *ngIf=\"f['username'].touched && f['username'].invalid\">\n                  <span *ngIf=\"f['username'].errors['required']\">This field is mandatory.</span> \n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Password\n                </mat-label>\n                <input matInput formControlName=\"password\" id=\"remainingtime\" type=\"password\" class=\"form-control\">\n                <mat-error *ngIf=\"f['password'].touched && f['password'].invalid\">\n                  <span *ngIf=\"f['password'].errors['required']\">This field is mandatory.</span> \n                </mat-error>\n              </mat-form-field>\n              <button mat-raised-button  color=\"primary\" [disabled]=\"!userForm.valid\" type=\"submit\">Register</button>\n              <button mat-raised-button color=\"primary\" type= \"button\" (click)=\"clearForm()\">Clear</button> \n            </div> \n          </form>    \n      </mat-card>    \n      <mat-card class=\"error\" fxLayoutAlign=\"center center\" *ngIf=\"errorMessage\" >\n        {{errorMessage}}  \n      </mat-card>\n    </main>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n\n","import {throwError,  Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport {Token} from './token';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SigninService {\n  public token!: Token; //to store the jwt authentication token to re-send to the server if needed\n  private signinUrl;\n\n\n  //constructor receives Http object from angular 2 for api calls.\n  constructor(private http: HttpClient) {\n    //set token if saved in local storage\n    this.signinUrl = '/api/auth/login'; //URL to API authenticate service\n    var currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n      if (currentUser) this.token = currentUser;\n}\n // Submit User name and Password obtain token object from server that has the username and the jwt token\n\n  login (username: string, password: string, latitude: number, longitude: number) {\n    console.log(\"SignIn service -> login call\");\n\n      return this.http.post<Token>(this.signinUrl, { username: username, password: password, latitude: latitude, longitude: longitude})\n              .pipe(\n                        catchError(this.handleError)\n                      );\n  }\n\n// store token object in the service for other services to use when authentication is needed.\n  setToken (token: Token): void {\n    this.token.username = token.username;\n    this.token.token = token.token;\n    localStorage.setItem('currentUser', JSON.stringify({username: token.username, token:token.token}));\n\n  }\n\n    logout (): void {\n  \t//clear token remove user from local storage to log user out\n  \tthis.token.username = '{}';\n  \tthis.token.token = '{}';\n  \tlocalStorage.removeItem ('currentUser');\n  }\n\n  /**\n   * Handle Http operation that failed.\n   */\n   private handleError (error: HttpErrorResponse) {\n    let errMsg:string;\n    if (error.error instanceof ErrorEvent) {\n    // A client-side or network error occurred. Handle it accordingly.\n      errMsg = error.error.message ? error.error.message : error.toString()\n      console.error(errMsg);\n    } else {\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong,\n      errMsg = error.status + ' - ' + error.statusText;\n      console.error(errMsg);\n    }\n    return throwError(()=> new Error (errMsg));\n    };\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SigninService } from '../signin.service';\nimport { SocketService } from '../socket.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.css']\n})\n\n\nexport class SigninComponent implements OnInit {\n  errorMessage : string; // string to store error messages\n  loginForm!: FormGroup;\n  latitude: number;\n  longitude: number;\n\n  constructor(\n  \tprivate router: Router, private signinservice: SigninService, private socketservice: SocketService\n  ) {\n  \t\tthis.errorMessage = \"\";\n      this.latitude = 0;\n      this.longitude = 0;\n    }\n\n  ngOnInit(): void {\n  \t this.loginForm = new FormGroup({\n      username: new FormControl ('', [Validators.required]),\n      password: new FormControl('', Validators.required)\n  \t });\n  }\n\n  get f(){\n\n    return this.loginForm.controls;\n\n  }\n\n  submit() {\n    if (!this.loginForm.valid) {\n      console.log(this.loginForm.controls['password'].errors);\n      return;\n    }\n    // Get Browser Coordinates to sent to the server database. example here : https://www.itsolutionstuff.com/post/angular-google-maps-get-current-locationexample.html  \n    \n    //for now they are 0\n    this.latitude = 0;\n    this.longitude = 0;\n\n    this.signinservice.login(this.loginForm.value.username, this.loginForm.value.password, this.latitude, this.longitude)\n        .subscribe({\n            next: result => {\n                // if the Http POST call made is successfull the result is a Token object\n                this.signinservice.setToken(result); // store the received jwt token in the sign in service for future use in authentication\n                this.socketservice.connect();\t// connect the websocket since we already have the token\n                //send a new user event to the server so that the server can store the socket ID mapped to the usernames\n                this.socketservice.sendEvent('newUser:username',{username: this.loginForm.value.username});\n                this.errorMessage = \"\";\n                console.log('navigating to auction');\n                //login successful navigate to acution page\n                this.router.navigate(['/auction']);\n              },\n              error: error => {\n                this.errorMessage = <any>error;\n                console.log('errorMessage: ', this.errorMessage);\n                this.loginForm.controls['username'].setErrors({invalid: true});\n              }\n            });\n      console.log(\"signin Component Login Submitted: \", this.loginForm.value);\n    }\n\n}\n","<mat-sidenav-container>\n  <mat-sidenav  #sidenav role=\"navigation\">\n   <mat-nav-list>\n    <a mat-list-item routerLink=\"/register\">\n      <mat-icon class=\"icon\">input</mat-icon>\n        <span class=\"label\"> Register</span>\n    </a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n     <div fxHide.gt-xs>\n       <button mat-icon-button (click)=\"sidenav.toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n    </div>\n     <div>\n       <a routerLink=\"/\">\n          Auctions SAR 22\n       </a>\n     </div>\n     <div fxFlex fxLayout fxLayoutAlign=\"flex-end\"  fxHide.xs>\n        <ul fxLayout fxLayoutGap=\"30px\" class=\"navigation-items\">\n            <li>\n              <a routerLink=\"/register\">\n                  <mat-icon class=\"icon\">input</mat-icon>\n                  <span class=\"label\">Register</span>\n              </a>\n            </li>\n        </ul>\n     </div>\n    </mat-toolbar>\n    <main>\n      <mat-card fxLayoutAlign=\"center center\">\n          <form [formGroup]=\"loginForm\" (submit)=\"submit()\">\n            <div fxLayout=\"column\" fxFlex fxLayout.lt-sm=\"column\" fxLayoutGap=\"0px\">\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Enter username\n                </mat-label>\n                <input matInput formControlName=\"username\" id=\"username\" type=\"text\" class=\"form-control\">\n                <mat-error *ngIf=\"f['username'].touched && f['username'].invalid\">\n                  <span *ngIf=\"f['username'].errors['required']\">This field is mandatory.</span>\n                </mat-error>\n              </mat-form-field>\n              <mat-form-field class=\"form-field\" appearance=\"outline\">\n                <mat-label> Password\n                </mat-label>\n                <input matInput formControlName=\"password\" id=\"password\" type=\"password\" class=\"form-control\">\n                <mat-error *ngIf=\"f['password'].touched && f['password'].invalid\">\n                  <span *ngIf=\"f['password'].errors['required']\">This field is mandatory.</span>\n                </mat-error>\n              </mat-form-field>\n              <button mat-raised-button  color=\"primary\" [disabled]=\"!loginForm.valid\" type=\"submit\">Log In</button>\n              <button mat-raised-button  color=\"primary\" routerLink=\"/register\">New? Register</button>\n            </div>\n          </form>\n      </mat-card>\n      <mat-card class=\"error\" fxLayoutAlign=\"center center\" *ngIf=\"errorMessage\" >\n      \tInvalid user Name or Password.\n      </mat-card>\n    </main>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n\n","import { Injectable } from '@angular/core';\nimport { SigninService } from './signin.service';\nimport { Subject ,  Observable } from 'rxjs';\nimport { Socket } from 'ngx-socket-io';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SocketService {  \n \n  private url = window.location.origin;\n  //constructor receives IO object and SignInService to check for authentication token\n  constructor(private signInService: SigninService, private socket: Socket) { }\n \n\n  connect (){             //add the jwt token to the options \n    this.socket.ioSocket.io.opts.query = { token: this.signInService.token.token}\n  \tthis.socket.connect();\n    console.log('Websocket connected with token', this.signInService.token.token);\n  }\n\n  disconnect(){\n  \t this.socket.disconnect();\n  }\n\n  // sends a new event with name EventName and data Data\n  sendEvent (EventName:any,Data:any){\n  \t\t\t\t\t\t // newUser:username' is the name of the event in the server. \t\n  \t\tthis.socket.emit(EventName, Data);\n  }\n\n   // configures an observable to emit a value every time we receive a event with name\n  getEvent(Eventname: any){\n  \t let observable = new Observable (observer =>{\n  \t \tthis.socket.on(Eventname, (data:any) => {\n  \t \t\tobserver.next(data);\n  \t \t});\n  \t })\n  \t return observable;\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}